---
# SPDX-FileCopyrightText: Copyright (C) 2021 ale5000
# SPDX-License-Identifer: LGPL-3.0-or-later
# SPDX-FileType: SOURCE

name: "TEST"
author: "ale5000"
description: "GitHub action to execute a lint check of all shell scripts using ShellCheck."
branding:
  icon: "check-circle"
  color: "green"

inputs:
  shellcheck-version:
    description: "Version of ShellCheck to use. Values: [stable, latest, v0.7.2, ...]"
    required: false
    default: "stable"
  severity:
    description: "Minimum severity of issues to display. Values: [style, info, warning, error]"
    required: false
    default: "style"
  enable-all-opt-checks:
    description: "Enable all optional checks. Values: [true, false]"
    required: false
    default: "false"
  ignore-files:
    description: "List of files to ignore, the separator is: |"
    required: false
outputs:
  NumFilesWthIssues:
    description: "Number of files with issues"
    value: "${{ steps.shellcheck-scan.outputs.numfileswithissues }}"
  ListFilesWithIssues:
    description: "A list of files with issues"
    value: "${{ steps.shellcheck-scan.outputs.listfileswithissues }}"
runs:
  using: "composite"
  steps:
    - name: "Set up matchers"
      shell: bash
      run: |
        # Setting up matchers...
        action_path="${{ github.action_path }}"
        matcher_file="${action_path?}/.github/matchers/tty/shellcheck-matcher.json"
        if test -f "${matcher_file?}"; then echo "::add-matcher::${matcher_file}"; echo 'Matcher 1 configured.'; fi
        matcher_file="${action_path?}/.github/matchers/tty/shellcheck-matcher-legacy.json"
        if test -f "${matcher_file?}"; then echo "::add-matcher::${matcher_file}"; echo 'Matcher 2 configured.'; fi
    - name: "Download ShellCheck"
      shell: bash
      run: |
        # Downloading ShellCheck...
        BASE_LINE='52'
        annotate_error() { LINE="$(("${BASH_LINENO[0]}"+"${BASE_LINE}"-2))"; echo "::error::Error $1 in action.yml at line ${LINE}" 1>&2; exit "$1"; }

        case "${{ runner.os }}" in 'Linux') current_os='linux';; 'macOS') current_os='darwin';; 'Windows') current_os='win';; *) annotate_error 1; esac
        action_path="${{ github.action_path }}"
        sc_ver="${{ inputs.shellcheck-version }}"
        base_url="https://github.com/koalaman/shellcheck/releases/download/${sc_ver?}/"
        if test "${current_os}" = 'win'; then archive_name="shellcheck-${sc_ver?}.zip"; else archive_name="shellcheck-${sc_ver?}.${current_os?}.x86_64.tar.xz"; fi

        ## Installing wget (only on Windows)...
        if test "${current_os}" = 'win'; then choco install --no-progress --yes wget 1>&- || annotate_error 2; fi

        download_dir="${action_path?}/our_downloads"
        mkdir -p "${download_dir?}" || annotate_error 3
        cd "${download_dir?}" || annotate_error 4
        wget -q -O "${archive_name?}" "${base_url?}${archive_name?}" || annotate_error 5

        archive_name="${download_dir?}/${archive_name?}"
        if test "${current_os}" = 'win'; then
          unzip -ojq "${archive_name?}" '*' -d "${download_dir?}/shellcheck-${sc_ver?}/" || annotate_error 6
        else
          tar -xf "${archive_name?}" || annotate_error 6
        fi
        mv -f "${download_dir?}/shellcheck-${sc_ver?}/shellcheck"* "${action_path?}/" || annotate_error 7
        cd "${action_path?}" || annotate_error 8
        rm -rf "${download_dir?}" || annotate_error 9
    - name: "Execute ShellCheck scan"
      id: "shellcheck-scan"
      shell: bash {0}
      run: |
        # Executing ShellCheck scan...
        PATH="${{ github.action_path }}:${PATH}"
        hash shellcheck
        shellcheck --version
        SHELLCHECK_OPTS="--color --severity=${{ inputs.severity }}"
        if test "${{ inputs.enable-all-opt-checks }}" != 'false'; then SHELLCHECK_OPTS+=" --enable=all"; fi
        if test "${{ github.event_name }}" != 'pull_request'; then SHELLCHECK_OPTS+=" -x"; fi
        export SHELLCHECK_OPTS

        ignore_string="${{ inputs.ignore-files }}"
        ignore_list=()
        if test -n "$ignore_string"; then
          OLDIFS="$IFS"
          IFS='|'
          read -ra ignore_list <<< "${ignore_string}"
          IFS="$OLDIFS"
        fi

        #echo "[32m		  ^-----------------------^ SC1091 (info): Not following: /tmp/backuptool.functions: openBinaryFile: does not exist (No such file or directory)[0m"
        #echo "^-----------------------^ SC1091 (info): Not following: /tmp/backuptool.functions: openBinaryFile: does not exist (No such file or directory)[0m"
        #echo "^-----------------------^ SC1091 (info): Not following: /tmp/backuptool.functions: openBinaryFile: does not exist (No such file or directory)"
        echo "SC1091 (info): Not following: /tmp/backuptool.functions: openBinaryFile: does not exist (No such file or directory)"
        echo "SC1091 (info): Not"
        exit 1

        scan_files()
        {
          count='0'
          list=()
          escaped_csi="$(printf '\033\[')"
          regexp_1="s/^\(${escaped_csi}0m\)/\1\t\t/"
          regexp_2="s/^\(${escaped_csi}[2-9][0-9]\?m\)/\1\t/"

          set -o pipefail
          while read -r FILE; do
            echo '################################################################################'
            FILE_LOWER="$(echo "${FILE}" | tr '[:upper:]' '[:lower:]')"
            to_ignore=false
            for ELEM in "${ignore_list[@]}"; do
              if [[ "${FILE}" == *"/${ELEM}" ]]; then to_ignore=true; break; fi
            done

            if $to_ignore; then
              echo "Ignored: $FILE"
            elif expr "$FILE_LOWER" : '^.*\.\(sh\|ash\|dash\|ksh\|bash\|bats\)$' 1>/dev/null || test '#!' = "$(head -c 2 "$FILE")"; then
              echo "Currently scanning: $FILE"
              if test "${{ runner.os }}" = 'Windows'; then
                shellcheck "$FILE" | tr -d '\r' | sed -e "${regexp_1}" | sed -e "${regexp_2}"; STATUS="$?"
              else
                shellcheck "$FILE" | sed -e "${regexp_1}" | sed -e "${regexp_2}"; STATUS="$?"
              fi
              if test "${STATUS}" -ne 0; then count="$((count+1))"; list+=("$FILE"); fi
            else
              echo "Skipped: $FILE"
            fi
          done
          list_string="$(printf '\"%s\" ' "${list[@]}")"; unset list

          echo "::set-output name=numfileswithissues::${count}"
          echo "::set-output name=listfileswithissues::(${list_string})"; unset list_string
          return "${count}"
        }
        find '.' -type f \! -path './.git/*' | LC_ALL=C sort | scan_files; num_files_with_issues="$?"

        printf '################################################################################\n\n'
        if test "${num_files_with_issues}" -gt '0'; then result_icon="üêõ"; else result_icon="‚úÖ"; fi
        echo "::notice::[ShellChecker] NUMBER OF FILES WITH ISSUES: ${num_files_with_issues} ${result_icon}"
        if test "${num_files_with_issues}" -gt '0'; then exit '1'; else printf "\033[32mAll is good!\n"; fi
